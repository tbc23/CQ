def uniformSuperposition[n:!N]():uint[n] {
       x := 0:uint[n];
       for i in [0..n) { x[i] := H(x[i]); }
       return x;
}

def Hadamard() {
  x:=0:𝔹;
  return H(x);
}

def PauliZ() {
  z:=1:𝔹;
  return Z(z);
}

def PauliY() {
  y:=1:𝔹;
  return Y(y);
}

def PauliX() {
  x:=0:𝔹;
  return X(x);
}

def HalfAdder(){
  // Define 4 Qubits - a & b inputs, s & c are sum and carry - outputs
  a:=1:𝔹;
  b:=1:𝔹;
  s:=0:𝔹;
  c:=0:𝔹;

  // XOR Gate Operation

  // CX operation on b and s qubit
  if b{
    s := X(s);
  }
  
  // CX operation on a and s
  if a{
    s := X(s);
  }

  // AND Gate Operation

  if a && b{
    c := X(c);
  }

  return (s,c);
}


def main() {
    return uniformSuperposition[2]();
}